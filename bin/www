#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mdm-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const {Server} = require("socket.io");
const io = new Server(server,{
cors:{
  origin: "*",
  methods: ["GET,POST,PUT,DELETE,PATCH"]
}  
});

io.on('connection', (socket) => {
  console.log('User connected: ' + socket.id);

  const safeHandler = (handler) => async (...args) =>{
  try{
    await handler(...args);
  } catch(err){
    console.error(`Error in handler:`, err.message);
    socket.emit('error', { message: 'Internal server error '+err.message });
  }
};    

  socket.on('chat message', safeHandler(async(msg) =>{
    console.log('message: ' + msg);
    io.emit('chat message', msg);
  })); 

  socket.on('screen_frame', safeHandler(async (msg) =>{
    console.log('screen_frame in bytes: ' + msg);
    io.emit('screen_frame', msg);
  })); 
  
  socket.on('disconnect', (msg)=>{
  console.log('User disconnected: ' + socket.id + ' reason is: ' +msg);
  }); 

  socket.on('error', (err) => {
  console.error('Socket error from client:', socket.id + ' error is: ', err);
  socket.emit('error', { message: 'client error is: ' +err});
  });
  
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on port :',port);
}
